import {
  __commonJS
} from "./chunk-HL2QZUHZ.js";

// node_modules/khalti-checkout-web/dist/khalti-checkout.cjs.js
var require_khalti_checkout_cjs = __commonJS({
  "node_modules/khalti-checkout-web/dist/khalti-checkout.cjs.js"(exports, module) {
    function unwrapExports(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    function createCommonjsModule(fn, module2) {
      return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
    }
    var lib = createCommonjsModule(function(module2, exports2) {
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
      };
      var SkipValidation = exports2.SkipValidation = function SkipValidation2(message) {
        this.name = "SkipValidation";
        this.message = message;
      };
      var validateSingle = exports2.validateSingle = function validateSingle2(data, validators, multipleErrors, all, key) {
        var errors = [];
        if (typeof validators === "function") {
          validators = [validators];
        }
        for (var i = 0; i < validators.length; i++) {
          try {
            var error = validators[i](data, all);
            if (typeof error === "string") {
              errors.push(error.replace("{value}", data).replace("{key}", key));
            }
          } catch (err) {
            if (err instanceof SkipValidation) {
              break;
            }
          }
        }
        if (multipleErrors === true)
          return errors;
        if (errors.length > 0)
          return errors[0];
      };
      var validate = exports2.validate = function validate2(data, validators, multipleErrors) {
        if (!validators)
          return;
        var errors = {};
        var noError = true;
        if ((typeof validators === "undefined" ? "undefined" : _typeof(validators)) === "object" && !validators.length) {
          for (var prop in validators) {
            if (validators.hasOwnProperty(prop)) {
              var error = validateSingle(data[prop], validators[prop], multipleErrors, data, prop);
              if (error !== void 0) {
                noError = false;
              }
              errors[prop] = error;
            }
          }
          return noError ? void 0 : errors;
        }
        errors = validateSingle(data, validators, multipleErrors);
        return errors;
      };
      var required = exports2.required = function required2(flag, error) {
        function isNullLike(value) {
          return value === void 0 || value === "" || value === null;
        }
        return function(value) {
          if (flag && isNullLike(value)) {
            return error || "This field is required.";
          } else if (!flag && isNullLike(value)) {
            throw new SkipValidation();
          }
        };
      };
      var isNumber = exports2.isNumber = function isNumber2(error) {
        return function(value) {
          if (typeof value !== "number" || isNaN(value)) {
            return error || "'{value}' is not a valid number.";
          }
        };
      };
      var isString = exports2.isString = function isString2(error) {
        return function(value) {
          if (typeof value !== "string") {
            return error || "'{value}' is not a valid string.";
          }
        };
      };
      var isFunction = exports2.isFunction = function isFunction2(error) {
        return function(value) {
          if (typeof value !== "function") {
            return error || "Expected a function.";
          }
        };
      };
      var isObject = exports2.isObject = function isObject2(error) {
        return function(value) {
          if (value !== Object(value)) {
            return error || "Expected an object.";
          }
        };
      };
      var isArray = exports2.isArray = function isArray2(error) {
        return function(value) {
          if (Object.prototype.toString.call(value) !== "[object Array]") {
            return error || "Expected an array.";
          }
        };
      };
      var length = exports2.length = function length2(_length, error) {
        return function(value) {
          var str = value + "";
          if (str.length !== _length) {
            return error || "It must be " + _length + " characters long.";
          }
        };
      };
      var isEmail = exports2.isEmail = function isEmail2(error) {
        return function(value) {
          var pattern2 = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          if (!pattern2.test(value)) {
            return error || "Invalid email id.";
          }
        };
      };
      var equalsTo = exports2.equalsTo = function equalsTo2(key, error) {
        return function(value, all) {
          if (value !== all[key]) {
            return error || "'{key}' and '" + key + "' do not match.";
          }
        };
      };
      var minLength = exports2.minLength = function minLength2(length2, error) {
        return function(value) {
          var str = value + "";
          if (str.length < length2) {
            return error || "It must be at least " + length2 + " characters long.";
          }
        };
      };
      var maxLength = exports2.maxLength = function maxLength2(length2, error) {
        return function(value) {
          var str = value + "";
          if (str.length > length2) {
            return error || "It must be at most " + length2 + " characters long.";
          }
        };
      };
      var isBoolean = exports2.isBoolean = function isBoolean2(error) {
        return function(value) {
          if (value !== true && value !== false) {
            return error || "Invalid boolean value.";
          }
        };
      };
      var within = exports2.within = function within2(list, error) {
        return function(value) {
          if (!(value instanceof Array)) {
            value = [value];
          }
          var odds = [];
          for (var index = 0; index < value.length; index++) {
            if (list.indexOf(value[index]) === -1) {
              odds.push(value[index]);
            }
          }
          if (odds.length > 0) {
            return error || "[" + odds + "] do not fall under the allowed list.";
          }
        };
      };
      var excludes = exports2.excludes = function excludes2(list, error) {
        return function(value) {
          if (!(value instanceof Array)) {
            value = [value];
          }
          var odds = [];
          for (var index = 0; index < value.length; index++) {
            if (list.indexOf(value[index]) !== -1) {
              odds.push(value[index]);
            }
          }
          if (odds.length > 0) {
            return error || "[" + odds + "] fall under restricted values.";
          }
        };
      };
      var pattern = exports2.pattern = function pattern2(regex, error) {
        return function(value) {
          if (!regex.test(value)) {
            return error || "'{value}' does not match with the pattern.";
          }
        };
      };
    });
    unwrapExports(lib);
    var lib_1 = lib.SkipValidation;
    var lib_2 = lib.validateSingle;
    var lib_3 = lib.validate;
    var lib_4 = lib.required;
    var lib_5 = lib.isNumber;
    var lib_6 = lib.isString;
    var lib_7 = lib.isFunction;
    var lib_8 = lib.isObject;
    var lib_9 = lib.isArray;
    var lib_10 = lib.length;
    var lib_11 = lib.isEmail;
    var lib_12 = lib.equalsTo;
    var lib_13 = lib.minLength;
    var lib_14 = lib.maxLength;
    var lib_15 = lib.isBoolean;
    var lib_16 = lib.within;
    var lib_17 = lib.excludes;
    var lib_18 = lib.pattern;
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var paymentType = {
      EBANKING: "EBANKING",
      MOBILE_BANKING: "MOBILE_BANKING",
      CONNECT_IPS: "CONNECT_IPS",
      SCT: "SCT",
      KHALTI: "KHALTI"
    };
    var CDN_HOST = "https://khalti.s3.ap-south-1.amazonaws.com/KPG/dist/2020.12.22.0.0.0";
    var ZHTML_src = CDN_HOST + "/payment_gateway_widget.html";
    var INFINITY_LOADER = CDN_HOST + "/icons/infinity-loader.svg";
    var clone = function clone2(data) {
      if (!data)
        return data;
      return JSON.parse(JSON.stringify(data));
    };
    var eventHandlerSchema = {
      onSuccess: [lib_4(true), lib_7()],
      onError: [lib_4(false), lib_7()],
      onClose: [lib_4(false), lib_7()]
    };
    var configSchema = {
      publicKey: lib_4(true),
      productUrl: lib_4(true),
      productIdentity: lib_4(true),
      productName: lib_4(true),
      eventHandler: lib_4(true),
      amount: lib_4(true),
      merchantData: [lib_4(false), lib_8()],
      paymentPreference: [lib_4(false), lib_9()]
    };
    var KhaltiCheckout = function() {
      function KhaltiCheckout2(config) {
        _classCallCheck(this, KhaltiCheckout2);
        this._widgetId = "khalti-widget-" + Date.now();
        this._config = config;
        this._widget = this.attachWidget();
        this.listenToWidget();
        this.paymentType = paymentType;
        this.widgetLoaded = false;
      }
      _createClass(KhaltiCheckout2, [{
        key: "listenToWidget",
        value: function listenToWidget() {
          var _this = this;
          window.addEventListener("message", function(e) {
            if (!e.data.realm)
              return;
            if (e.data.realm === "widgetInit") {
              _this.widgetInit(e.data.payload);
            } else if (e.data.realm === "widgetLoad" && !_this.widgetLoaded) {
              if (e.data.payload.loaded) {
                _this.hideLoader();
                _this.widgetInit();
                _this.widgetLoaded = e.data.payload.loaded;
              }
            } else if (!e.data.payload || e.data.payload.widget_id !== _this._widgetId) {
              return;
            } else {
              var handler = "handle_msg_" + e.data.realm;
              _this[handler](e.data.payload);
            }
          }, false);
        }
      }, {
        key: "msgWidget",
        value: function msgWidget(realm, payload) {
          payload = clone(payload);
          payload.widgetId = this._widgetId;
          payload.source = "checkout_v2.1";
          this._widget.contentWindow.postMessage({ realm, payload }, "*");
        }
      }, {
        key: "handle_msg_widgetInit",
        value: function handle_msg_widgetInit() {
          this.widgetInit();
        }
      }, {
        key: "widgetInit",
        value: function widgetInit(data) {
          var paymentInfo = clone(this._config);
          delete paymentInfo.eventHandler;
          this.msgWidget("paymentInfo", paymentInfo);
        }
      }, {
        key: "diplayLoader",
        value: function diplayLoader() {
          var loader = window.document.getElementById("loader" + this._widgetId);
          loader.style.display = "block";
        }
      }, {
        key: "hideLoader",
        value: function hideLoader() {
          var loader = window.document.getElementById("loader" + this._widgetId);
          loader.style.display = "none";
        }
      }, {
        key: "validateConfig",
        value: function validateConfig() {
          var errors = lib_3(this._config, configSchema);
          if (errors) {
            throw new Error(JSON.stringify(errors));
          } else {
            var _errors = lib_3(this._config.eventHandler, eventHandlerSchema);
            if (_errors) {
              throw new Error(JSON.stringify({ eventHandler: _errors }));
            }
          }
        }
      }, {
        key: "handle_msg_walletPaymentVerification",
        value: function handle_msg_walletPaymentVerification(paymentInfo) {
          this._config.eventHandler.onSuccess(paymentInfo);
          this.hide();
        }
      }, {
        key: "handle_msg_widgetError",
        value: function handle_msg_widgetError(error) {
          var errorHandler = this._config.eventHandler.onError;
          errorHandler && errorHandler(error);
        }
      }, {
        key: "disableParentScrollbar",
        value: function disableParentScrollbar() {
          this.parentOverflowValue = window.document.body.style.overflowY;
          window.document.body.style.overflowY = "hidden";
        }
      }, {
        key: "enableParentScrollbar",
        value: function enableParentScrollbar() {
          window.document.body.style.overflowY = this.parentOverflowValue;
          this.parentOverflowValue = null;
        }
      }, {
        key: "show",
        value: function show(updates) {
          Object.assign(this._config, updates);
          this.validateConfig();
          this.disableParentScrollbar();
          this._widget.style.display = "block";
          if (this.widgetLoaded) {
            this.widgetInit();
          } else {
            this.diplayLoader();
          }
        }
      }, {
        key: "handle_msg_hide",
        value: function handle_msg_hide() {
          this.hide();
          var closeHandler = this._config.eventHandler.onClose;
          closeHandler && closeHandler();
        }
      }, {
        key: "hide",
        value: function hide() {
          this.enableParentScrollbar();
          this._widget.style.display = "none";
        }
      }, {
        key: "attachWidget",
        value: function attachWidget() {
          var widget = window.document.createElement("iframe");
          widget.setAttribute("id", this._widgetId);
          widget.style.position = "fixed";
          widget.style.display = "none";
          widget.style.top = "0";
          widget.style.left = "0";
          widget.width = "100%";
          widget.height = window.innerHeight + "px";
          widget.setAttribute("src", ZHTML_src);
          widget.style.zIndex = 99999;
          widget.setAttribute("frameborder", 0);
          widget.setAttribute("allowtransparency", true);
          var loader = window.document.createElement("div");
          loader.setAttribute("id", "loader" + this._widgetId);
          loader.style.width = "100%";
          loader.style.height = "100%";
          loader.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
          loader.style.top = "0px";
          loader.style.left = "0px";
          loader.style.position = "absolute";
          loader.style.display = "none";
          loader.innerHTML = '<img style="position:relative;left:50%;top:50%;transform:translate(-50%, -50%);z-index: 99999;" src=' + INFINITY_LOADER + "></img>";
          if (!window.document.body.contains(loader)) {
            window.document.body.appendChild(loader);
          }
          window.document.body.appendChild(widget);
          return widget;
        }
      }]);
      return KhaltiCheckout2;
    }();
    module.exports = KhaltiCheckout;
  }
});
export default require_khalti_checkout_cjs();
//# sourceMappingURL=khalti-checkout-web.js.map
